# Makefile for building Google Test and using it in pika tests.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

default: all

# Set the default DEBUG_LEVEL to 0
DEBUG_LEVEL?=0

ifeq ($(MAKECMDGOALS),dbg)
  DEBUG_LEVEL=2
endif

ifneq ($(DISABLE_UPDATE_SB), 1)
$(info updating submodule)
dummy := $(shell (git submodule init && git submodule update))
endif

# compile with -O2 if debug level is not 2
ifneq ($(DEBUG_LEVEL), 2)
OPT += -O2 -fno-omit-frame-pointer
# if we're compiling for release, compile without debug code (-DNDEBUG) and
# don't treat warnings as errors
OPT += -DNDEBUG
DISABLE_WARNING_AS_ERROR=1
# Skip for archs that don't support -momit-leaf-frame-pointer
ifeq (,$(shell $(CXX) -fsyntax-only -momit-leaf-frame-pointer -xc /dev/null 2>&1))
OPT += -momit-leaf-frame-pointer
endif
else
$(warning Warning: Compiling in debug mode. Don't use the resulting binary in production)
OPT += $(PROFILING_FLAGS)
DEBUG_SUFFIX = "_debug"
endif

# ----------------------------------------------
ifndef PIKA_PATH
PIKA_PATH = $(CURDIR)/..
endif

THIRD_PATH = $(PIKA_PATH)/third
PROTO_PATH = $(PIKA_PATH)/proto
PIKA_SRC_PATH = $(PIKA_PATH)/src

TEST_OUTPUT=$(CURDIR)/output
TEST_SRC=$(CURDIR)/src

# ----------------Dependences-------------------

ifndef SLASH_PATH
SLASH_PATH = $(THIRD_PATH)/slash
endif
SLASH = $(SLASH_PATH)/slash/lib/libslash$(DEBUG_SUFFIX).a

ifndef PINK_PATH
PINK_PATH = $(THIRD_PATH)/pink
endif
PINK = $(PINK_PATH)/pink/lib/libpink$(DEBUG_SUFFIX).a

ifndef ROCKSDB_PATH
ROCKSDB_PATH = $(THIRD_PATH)/rocksdb
endif
ROCKSDB = $(ROCKSDB_PATH)/librocksdb$(DEBUG_SUFFIX).a

ifndef GLOG_PATH
GLOG_PATH = $(THIRD_PATH)/glog
endif

ifndef GTEST_PATH
GTEST_PATH = $(THIRD_PATH)/gtest
endif
GTEST = $(GTEST_PATH)/lib/libgtest.a
GTEST_MAIN = $(GTEST_PATH)/lib/libgtest_main.a
GMOCK = $(GTEST_PATH)/lib/libgmock.a
GMOCK_MAIN = $(GTEST_PATH)/lib/libgmock_main.a

ifndef BLACKWIDOW_PATH
BLACKWIDOW_PATH = $(THIRD_PATH)/blackwidow
endif
BLACKWIDOW = $(BLACKWIDOW_PATH)/lib/libblackwidow$(DEBUG_SUFFIX).a

ifeq ($(360), 1)
GLOG := $(GLOG_PATH)/.libs/libglog.a
endif

INCLUDE_PATH = -I. \
               -I$(PIKA_PATH) \
							 -I$(SLASH_PATH) \
							 -I$(PINK_PATH) \
							 -I$(BLACKWIDOW_PATH)/include \
							 -I$(ROCKSDB_PATH) \
							 -I$(ROCKSDB_PATH)/include \
							 -I$(GTEST_PATH)/googletest/include \
							 -I$(GTEST_PATH)/googlemock/include

ifeq ($(360),1)
INCLUDE_PATH += -I$(GLOG_PATH)/src
endif

LIB_PATH = -L./ \
					 -L$(SLASH_PATH)/slash/lib \
					 -L$(PINK_PATH)/pink/lib \
					 -L$(BLACKWIDOW_PATH)/lib \
					 -L$(ROCKSDB_PATH)        \
					 -L$(GTEST_PATH)/lib

ifeq ($(360),1)
LIB_PATH += -L$(GLOG_PATH)/.libs
endif

LDFLAGS += $(LIB_PATH) \
			 		 -lpink$(DEBUG_SUFFIX) \
			 		 -lslash$(DEBUG_SUFFIX) \
					 -lblackwidow$(DEBUG_SUFFIX) \
					 -lrocksdb$(DEBUG_SUFFIX) \
					 -lglog \
					 -lprotobuf \
					 -lgtest \
					 -lgmock

PIKA_SOURCES := \
				$(wildcard $(PIKA_SRC_PATH)/replication/classic/*.cc) \
				$(wildcard $(PIKA_SRC_PATH)/replication/cluster/*.cc) \
				$(wildcard $(PIKA_SRC_PATH)/replication/*.cc) \
				$(wildcard $(PIKA_SRC_PATH)/util/*.cc) \
				$(wildcard $(PIKA_SRC_PATH)/common/*.cc) \
				$(wildcard $(PIKA_SRC_PATH)/storage/*.cc)

TEST_DEP_SOURCES := \
	      $(wildcard $(TEST_SRC)/deps/*.cc) \
	      $(wildcard $(TEST_SRC)/util/*.cc)

TEST_SOURCES := \
	      $(wildcard $(TEST_SRC)/*.cc) \
	      $(wildcard $(TEST_SRC)/tests/*.cc) \
	      $(wildcard $(TEST_SRC)/tests/storage/*.cc) \
	      $(wildcard $(TEST_SRC)/tests/replication/*.cc) \
	      $(wildcard $(TEST_SRC)/tests/replication/classic/*.cc) \
	      $(wildcard $(TEST_SRC)/tests/replication/cluster/*.cc)

PIKA_PROTO := $(wildcard $(PROTO_PATH)/*.proto)
PIKA_PROTO_GENS := $(PIKA_PROTO:%.proto=%.pb.h) $(PIKA_PROTO:%.proto=%.pb.cc)

#-----------------------------------------------

AM_DEFAULT_VERBOSITY = 0

AM_V_GEN = $(am__v_GEN_$(V))
am__v_GEN_ = $(am__v_GEN_$(AM_DEFAULT_VERBOSITY))
am__v_GEN_0 = @echo "  GEN     " $(notdir $@);
am__v_GEN_1 =
AM_V_at = $(am__v_at_$(V))
am__v_at_ = $(am__v_at_$(AM_DEFAULT_VERBOSITY))
am__v_at_0 = @
am__v_at_1 =

AM_V_CC = $(am__v_CC_$(V))
am__v_CC_ = $(am__v_CC_$(AM_DEFAULT_VERBOSITY))
am__v_CC_0 = @echo "  CC      " $(notdir $@);
am__v_CC_1 =
CCLD = $(CC)
LINK = $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
AM_V_CCLD = $(am__v_CCLD_$(V))
am__v_CCLD_ = $(am__v_CCLD_$(AM_DEFAULT_VERBOSITY))
am__v_CCLD_0 = @echo "  CCLD    " $(notdir $@);
am__v_CCLD_1 =

CXXFLAGS += -g

WARNING_FLAGS = -W -Wextra -Wall -Wsign-compare \
								-Wno-unused-parameter -Woverloaded-virtual \
								-Wnon-virtual-dtor -Wno-missing-field-initializers

ifndef DISABLE_WARNING_AS_ERROR
  WARNING_FLAGS += -Werror
endif

PLATFORM_CXXFLAGS= -std=c++11 -fno-builtin-memcmp -msse -msse4.2

CXXFLAGS += $(WARNING_FLAGS) $(INCLUDE_PATH) $(PLATFORM_CXXFLAGS) $(OPT)

PLATFORM_LDFLAGS= -lpthread -lrt
# Link tcmalloc if exist
dummy := $(shell ("$(PIKA_PATH)/detect_environment" "$(CURDIR)/make_config.mk"))
include make_config.mk
CLEAN_FILES += $(CURDIR)/make_config.mk
PLATFORM_LDFLAGS += $(ROCKSDB_LDFLAGS)

LDFLAGS += $(PLATFORM_LDFLAGS)

# ---------------End Dependences----------------

PIKAOBJECTS = $(PIKA_SOURCES:.cc=.o)
TESTOBJECTS = $(TEST_SOURCES:.cc=.o)
TESTDEPOBJECTS = $(TEST_DEP_SOURCES:.cc=.o)
PROTOOBJECTS = $(PIKA_PROTO:.proto=.pb.o)
PREPARE=prepare

.PHONY: clean test all dbg distclean

%.pb.h %.pb.cc: %.proto
	$(AM_V_GEN)protoc --proto_path=$(PROTO_PATH) --cpp_out=$(PROTO_PATH) $<

%.o: %.cc
	$(AM_V_CC)$(CXX) $(CXXFLAGS) -c $< -o $@


proto: $(PIKA_PROTO_GENS)

TEST = \
	mpsc_test \
	timer_test \
	threadpool_test \
	configuration_test \
  repl_manager_test \
	memory_log_test \
	stable_log_test \
  classic_repl_manager_test \
  classic_repl_rg_node_test \
	cluster_rg_node_test \
	cluster_log_manager_test \
	binlog_read_write_test

dbg: all

all: test

test: $(PREPARE) $(PROTOOBJECTS) $(GMOCK) $(TESTDEPOBJECTS) $(TESTOBJECTS) $(TEST)

$(PREPARE):
	$(AM_V_at)rm -rf $(TEST_OUTPUT)
	$(AM_V_at)mkdir -p $(TEST_OUTPUT)/bin

mpsc_test: $(SLASH) $(PINK) $(ROCKSDB) $(BLACKWIDOW) $(GLOG) $(PROTOOBJECTS) $(PIKAOBJECTS) $(TESTDEPOBJECTS)
	$(AM_V_at)$(AM_V_CCLD)$(CXX) $^ $(TEST_SRC)/tests/$@.o $(EXEC_LDFLAGS) -o $@ $(LDFLAGS)
	$(AM_V_at)mv $@ $(TEST_OUTPUT)/bin

timer_test: $(SLASH) $(PINK) $(ROCKSDB) $(BLACKWIDOW) $(GLOG) $(PROTOOBJECTS) $(PIKAOBJECTS) $(TESTDEPOBJECTS)
	$(AM_V_at)$(AM_V_CCLD)$(CXX) $^ $(TEST_SRC)/tests/$@.o $(EXEC_LDFLAGS) -o $@ $(LDFLAGS)
	$(AM_V_at)mv $@ $(TEST_OUTPUT)/bin

threadpool_test: $(SLASH) $(PINK) $(ROCKSDB) $(BLACKWIDOW) $(GLOG) $(PROTOOBJECTS) $(PIKAOBJECTS) $(TESTDEPOBJECTS)
	$(AM_V_at)$(AM_V_CCLD)$(CXX) $^ $(TEST_SRC)/tests/$@.o $(EXEC_LDFLAGS) -o $@ $(LDFLAGS)
	$(AM_V_at)mv $@ $(TEST_OUTPUT)/bin

configuration_test: $(SLASH) $(PINK) $(ROCKSDB) $(BLACKWIDOW) $(GLOG) $(PROTOOBJECTS) $(PIKAOBJECTS) $(TESTDEPOBJECTS)
	$(AM_V_at)$(AM_V_CCLD)$(CXX) $^ $(TEST_SRC)/tests/replication/$@.o $(EXEC_LDFLAGS) -o $@ $(LDFLAGS)
	$(AM_V_at)mv $@ $(TEST_OUTPUT)/bin

repl_manager_test: $(SLASH) $(PINK) $(ROCKSDB) $(BLACKWIDOW) $(GLOG) $(PROTOOBJECTS) $(PIKAOBJECTS) $(TESTDEPOBJECTS)
	$(AM_V_at)$(AM_V_CCLD)$(CXX) $^ $(TEST_SRC)/tests/replication/$@.o $(EXEC_LDFLAGS) -o $@ $(LDFLAGS)
	$(AM_V_at)mv $@ $(TEST_OUTPUT)/bin

stable_log_test: $(SLASH) $(PINK) $(ROCKSDB) $(BLACKWIDOW) $(GLOG) $(PROTOOBJECTS) $(PIKAOBJECTS) $(TESTDEPOBJECTS)
	$(AM_V_at)$(AM_V_CCLD)$(CXX) $^ $(TEST_SRC)/tests/replication/$@.o $(EXEC_LDFLAGS) -o $@ $(LDFLAGS)
	$(AM_V_at)mv $@ $(TEST_OUTPUT)/bin

memory_log_test: $(SLASH) $(PINK) $(ROCKSDB) $(BLACKWIDOW) $(GLOG) $(PROTOOBJECTS) $(PIKAOBJECTS) $(TESTDEPOBJECTS)
	$(AM_V_at)$(AM_V_CCLD)$(CXX) $^ $(TEST_SRC)/tests/replication/$@.o $(EXEC_LDFLAGS) -o $@ $(LDFLAGS)
	$(AM_V_at)mv $@ $(TEST_OUTPUT)/bin

classic_repl_manager_test: $(SLASH) $(PINK) $(ROCKSDB) $(BLACKWIDOW) $(GLOG) $(PROTOOBJECTS) $(PIKAOBJECTS) $(TESTDEPOBJECTS)
	$(AM_V_at)$(AM_V_CCLD)$(CXX) $^ $(TEST_SRC)/tests/replication/classic/$@.o $(EXEC_LDFLAGS) -o $@ $(LDFLAGS)
	$(AM_V_at)mv $@ $(TEST_OUTPUT)/bin

classic_repl_rg_node_test: $(SLASH) $(PINK) $(ROCKSDB) $(BLACKWIDOW) $(GLOG) $(PROTOOBJECTS) $(PIKAOBJECTS) $(TESTDEPOBJECTS)
	$(AM_V_at)$(AM_V_CCLD)$(CXX) $^ $(TEST_SRC)/tests/replication/classic/$@.o $(EXEC_LDFLAGS) -o $@ $(LDFLAGS)
	$(AM_V_at)mv $@ $(TEST_OUTPUT)/bin

cluster_rg_node_test: $(SLASH) $(PINK) $(ROCKSDB) $(BLACKWIDOW) $(GLOG) $(PROTOOBJECTS) $(PIKAOBJECTS) $(TESTDEPOBJECTS)
	$(AM_V_at)$(AM_V_CCLD)$(CXX) $^ $(TEST_SRC)/tests/replication/cluster/$@.o $(EXEC_LDFLAGS) -o $@ $(LDFLAGS)
	$(AM_V_at)mv $@ $(TEST_OUTPUT)/bin

cluster_log_manager_test: $(SLASH) $(PINK) $(ROCKSDB) $(BLACKWIDOW) $(GLOG) $(PROTOOBJECTS) $(PIKAOBJECTS) $(TESTDEPOBJECTS)
	$(AM_V_at)$(AM_V_CCLD)$(CXX) $^ $(TEST_SRC)/tests/replication/cluster/$@.o $(EXEC_LDFLAGS) -o $@ $(LDFLAGS)
	$(AM_V_at)mv $@ $(TEST_OUTPUT)/bin

binlog_read_write_test: $(SLASH) $(PINK) $(ROCKSDB) $(BLACKWIDOW) $(GLOG) $(PROTOOBJECTS) $(PIKAOBJECTS) $(TESTDEPOBJECTS)
	$(AM_V_at)$(AM_V_CCLD)$(CXX) $^ $(TEST_SRC)/tests/storage/$@.o $(EXEC_LDFLAGS) -o $@ $(LDFLAGS)
	$(AM_V_at)mv $@ $(TEST_OUTPUT)/bin

$(GMOCK):
	cd $(GTEST_PATH); if [ ! -f ./Makefile ]; then cmake ./CMakeLists.txt; fi; make;

$(SLASH):
	$(AM_V_at)make -C $(SLASH_PATH)/slash/ DEBUG_LEVEL=$(DEBUG_LEVEL)

$(PINK):
	$(AM_V_at)make -C $(PINK_PATH)/pink/ DEBUG_LEVEL=$(DEBUG_LEVEL) NO_PB=0 SLASH_PATH=$(SLASH_PATH)

$(ROCKSDB):
	$(AM_V_at)make -j $(PROCESSOR_NUMS) -C $(ROCKSDB_PATH)/ static_lib DISABLE_JEMALLOC=1 DEBUG_LEVEL=$(DEBUG_LEVEL)

$(BLACKWIDOW):
	$(AM_V_at)make -C $(BLACKWIDOW_PATH) ROCKSDB_PATH=$(ROCKSDB_PATH) SLASH_PATH=$(SLASH_PATH) DEBUG_LEVEL=$(DEBUG_LEVEL)

$(GLOG):
	cd $(THIRD_PATH)/glog; if [ ! -f ./Makefile ]; then ./configure --disable-shared; fi; make; echo '*' > $(CURDIR)/third/glog/.gitignore;

clean :
	rm -rf $(TEST_OUTPUT)
	rm -rf $(CLEAN_FILES)
	find $(TEST_SRC) -name "*.[oda]*" -exec rm -f {} \;

distclean: clean
	make -C $(PINK_PATH)/pink/ SLASH_PATH=$(SLASH_PATH) clean
	make -C $(SLASH_PATH)/slash/ clean
	make -C $(BLACKWIDOW_PATH)/ clean
	make -C $(ROCKSDB_PATH)/ clean
	make -C $(GTEST_PATH)/ clean
